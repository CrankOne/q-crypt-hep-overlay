<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>crank@qcrypt.org</email>
		<name>Renat Dusaev</name>
	</maintainer>
	<use>
    	<flag name="test">Enables build provided unit tests</flag>
    	<flag name="static">Enables static libraries compilation</flag>
    	<flag name="java">Enables java bindings (enabled by default)</flag>
    	<flag name="flavortagging">Flavor-tagging support (enabled by default)</flag>
    	<flag name="kinematics">Kinematic fitting (enabled by default)</flag>
    	<flag name="algorithm-zvres">zvres algorithm (enabled by default)</flag>
    	<flag name="algorithm-ttf">ttf algorithm (disabled by default)</flag>
    	<flag name="algotithm-mvf">algorithm (enabled by default)</flag>
    	<flag name="algorithm-gsf">gsf algorithm (enabled by default)</flag>
    	<flag name="algorithm-tkvf">tkvf algorithm (enabled by default)</flag>
    	<flag name="development">developers classes (e.g. special linpt finders etc.)</flag>
		<flag name="static">Enables static libraries build.</flag>
		<flag name="test">Enables unittests</flag>
		<flag name="boost">Enables boost dependency</flag>
	</use>
	<longdescription lang="en">
		A toolkit is presented that takes a set of reconstructed particle tracks as its input and produces reconstructed interaction vertices as its output. It deals both with finding (pattern recognition) and with fitting (statistical estimation) of the interaction vertices.
		Its main design goals are ease of use, high integratability in existing software projects, extensibility, and generality.
		To this end the API is defined in an as simple as possible way. The various algorithms, and optionally, their parameter settings, are referenced by a simple string. This guarantees that the user code decouples completely from the toolkit internals. Also, maintaining backwards compatibility should become a trivial task.
		The Rave Toolkit is complemented by a simple standalone framework, called "Vertigo". Implementation, verification, and performance analysis of reconstruction algorithms should thus be possible in a very fast and straightforward manner.
		Rave has its roots in the CMS vertex reconstruction community. The current algorithmic parts of the toolkit are source code compatible with the original CMS software, but contributions from "outside" are highly welcome.
B-tagging facilities are work in progress; kinematic fitting is a future addendum.
	</longdescription>
</pkgmetadata>

